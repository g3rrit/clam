mod Main

let a a b : A
  = 10

data Bool = True | False

data Pair
  = Pair Int A

data Arrow = Arrow (A -> B -> C)

data Arrow = Arrow ((A -> B) -> C)

data Arrow = Arrow (Arrow -> B -> B)

let main : IO
  = print
  ; b : A -> B = \ a b -> 20
  ; b : B = \ a b -> 20
  ; a := 10
  ; e := 1
  ; c := 1

let foo : IO
  = match a
      | A -> f a
      | B -> b

let foo : IO
  = a := match a
    | Cons a b -> foo a b c
    | Bla a b -> a b $ c d
    | List -> (match b
        | G -> (a := 0 ; b := 1; 10)
        | F a b b c -> (\ a b -> ( f a b )) a b)
    | List -> (match b
        | G -> (a := 0 ; b := 1; 10)
        | F a b b c -> (\ a b -> ( f a b )) a b)
  ; a b c

let bar : IO
  = a := 10
  ; if a then b else c
  ; b := if (if a then b else c) then 10 else f
  ; 10
  ; b := 20
  ; c := if a then b else >>
  ; d := a b c
  ; match a | D -> f
  ; match a | D -> g | E -> >>
  ; a := 10
  ; print


let foo : IO
  = a := a b $ c d $ e f g
  ; if a $ b c then b c $ d e else f $ g h
  ; 10


data A 
  = A0 b : B     
     ; c : C
  | A1 Int Bool  ;

struct B 
  = a : Int 
  ; b : Bool

struct B
  = (a : Int)
    (b : Bool)
